generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                   String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt            DateTime      @default(now())
  telegramId           Int           @unique
  nickname             String        @unique
  role                 Role          @default(USER)
  refId                String?
  isPremium            Boolean       @default(false)
  sales                Sale[]        @relation("UserSales")
  isBanned             Boolean       @default(false)
  messages             Message[]
  chats                UserChat[]
  money                Float         @default(0)
  transactions         Transaction[]
  lastOnline           DateTime      @default(now())
  photoUrl             String?
  lastUpSales          DateTime?
  ordersAsCustomer     Order[]       @relation("CustomerOrder")
  ordersAsSeller       Order[]       @relation("SellerOrder")
  lastWatchingSaleId   String?       @db.ObjectId
  leftFeedbacks        Feedback[]    @relation("LeftFeedbacks")
  myFeedbacks          Feedback[]    @relation("MyFeedbacks")
  trustedSeller        Boolean       @default(false)
  averageRating        Float?
  languageCode         String?
  reports              Report[]      @relation("MyReports")
  reportsAdmin         Report[]      @relation("Admin")
  isSubscribed         Boolean       @default(false)
  isPublishedFirstSale Boolean?      @default(false)
  tasks                Task[]
}

model Transaction {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String          @db.ObjectId
  transactionId String
  confirmed     Boolean         @default(false)
  countTon      Float
  type          TransactionType
  createdAt     DateTime        @default(now())
}

enum TransactionType {
  PAYMENT
  WITHDRAWAL
}

model Feedback {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  user        User     @relation("LeftFeedbacks", fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @db.ObjectId
  recipient   User     @relation("MyFeedbacks", fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId String   @db.ObjectId
  rate        Int
  text        String?
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String   @unique @db.ObjectId
}

model Scope {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String     @unique
  type      ScopeType
  subScopes SubScope[]
}

enum ScopeType {
  pc_games
  mobile_games
  tg_mini_app_game
  social_network
}

model SubScope {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  scope      Scope   @relation(fields: [scopeId], references: [id], onDelete: Cascade)
  scopeId    String  @db.ObjectId
  name       String
  sales      Sale[]
  isCurrency Boolean @default(false)
}

model Sale {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime @default(now())
  user         User     @relation("UserSales", fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @db.ObjectId
  price        Float
  product      String[] @default([])
  isPublished  Boolean  @default(false)
  isModerating Boolean  @default(true)

  subScopeId String   @db.ObjectId
  subScope   SubScope @relation(fields: [subScopeId], references: [id], onDelete: Cascade)

  adminId     String? @db.ObjectId
  title       String
  description String

  currency   Float?
  screenUrls String[] @default([])
  orders     Order[]

  lastUp      DateTime @default(now())
  autoMessage String?
}

model Order {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  sale        Sale?     @relation(fields: [saleId], references: [id])
  saleId      String?   @db.ObjectId
  customer    User      @relation("CustomerOrder", fields: [customerId], references: [id], onDelete: Cascade)
  customerId  String    @db.ObjectId
  isCompleted Boolean   @default(false)
  isCancelled Boolean   @default(false)
  amount      Float
  product     String?
  seller      User      @relation("SellerOrder", fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId    String    @db.ObjectId
  feedback    Feedback?
  reports     Report[]
  count       Int       @default(0)
}

model Chat {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime   @default(now())
  messages  Message[]
  users     UserChat[]
}

model UserChat {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  chatId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model Message {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  content         String?
  createdAt       DateTime @default(now())
  senderId        String   @db.ObjectId
  chatId          String   @db.ObjectId
  chat            Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender          User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  screens         String[] @default([])
  isSystemMessage Boolean  @default(false)
}

model Report {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String   @db.ObjectId
  user        User     @relation("MyReports", fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @db.ObjectId
  text        String
  createdAt   DateTime @default(now())
  isCompleted Boolean  @default(false)
  admin       User?    @relation("Admin", fields: [adminId], references: [id], onDelete: Cascade)
  adminId     String?  @db.ObjectId
}

model Task {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String  @db.ObjectId
  isComplete   Boolean
  idTaskInCode Int
}

enum Role {
  USER
  ADMIN
  CREATOR
}
