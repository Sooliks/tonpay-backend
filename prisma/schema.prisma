generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime      @default(now())
  telegramId   Int           @unique
  nickname     String        @unique
  role         Role          @default(USER)
  refId        String?
  isPremium    Boolean       @default(false)
  sales        Sale[]
  isBanned     Boolean       @default(false)
  messages     Message[]
  chats        UserChat[]
  feedbacks    Feedback[]
  money        Float         @default(0)
  transactions Transaction[]
  lastOnline   DateTime      @default(now())
  photoUrl     String?
}

model Transaction {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String          @db.ObjectId
  transactionId String
  confirmed     Boolean         @default(false)
  countTon      Float
  type          TransactionType
  createdAt     DateTime        @default(now())
}

enum TransactionType {
  PAYMENT
  WITHDRAWAL
}

model Feedback {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  sale      Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  saleId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  rate      Int
  text      String?
}

model Scope {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String     @unique
  type      ScopeType
  subScopes SubScope[]
}

enum ScopeType {
  pc_games
  mobile_games
  tg_mini_app_game
  social_network
}

model SubScope {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  scope      Scope   @relation(fields: [scopeId], references: [id], onDelete: Cascade)
  scopeId    String  @db.ObjectId
  name       String
  sales      Sale[]
  isCurrency Boolean @default(false)
}

model Sale {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @db.ObjectId
  price        Float
  product      String[] @default([])
  isPublished  Boolean  @default(false)
  isModerating Boolean  @default(true)

  subScopeId String   @db.ObjectId
  subScope   SubScope @relation(fields: [subScopeId], references: [id], onDelete: Cascade)

  adminId     String?    @db.ObjectId
  title       String
  description String
  feedbacks   Feedback[]

  currency Float?
}

model Chat {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime   @default(now())
  messages  Message[]
  users     UserChat[]
}

model UserChat {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  chatId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  chatId    String   @db.ObjectId
  senderId  String   @db.ObjectId

  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
  CREATOR
}
