generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime   @default(now())
  telegramId Int        @unique
  nickname   String     @unique
  role       Role       @default(USER)
  refId      String?
  isPremium  Boolean    @default(false)
  sales      Sale[]
  isBanned   Boolean    @default(false)
  messages   Message[]
  chats      UserChat[]
  feedbacks  Feedback[]
}

model Feedback {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  sale      Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  saleId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  rate      Int
  text      String?
}

model Scope {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  subScopes SubScope[]
  sales     Sale[]
}

model SubScope {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  scope   Scope  @relation(fields: [scopeId], references: [id], onDelete: Cascade)
  scopeId String @db.ObjectId
  name    String
  sales   Sale[]
}

model Sale {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime   @default(now())
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String     @db.ObjectId
  price       Float
  count       Int?
  product     String[]   @default([])
  isPublished Boolean    @default(false)
  scopeId     String     @db.ObjectId
  subScopeId  String     @db.ObjectId
  scope       Scope      @relation(fields: [scopeId], references: [id], onDelete: Cascade)
  subScope    SubScope   @relation(fields: [subScopeId], references: [id], onDelete: Cascade)
  adminId     String?    @db.ObjectId
  title       String
  description String
  feedback    Feedback[]
}

model Chat {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime   @default(now())
  messages  Message[]
  users     UserChat[]
}

model UserChat {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  chatId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  chatId    String   @db.ObjectId
  senderId  String   @db.ObjectId

  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
  CREATOR
}
